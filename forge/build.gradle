plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "dwm-common.mixins.json"
        mixinConfig "dwm.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "minecraftVersion", rootProject.minecraft_version
    inputs.property "architecturyVersion", rootProject.architectury_version
    inputs.property "modVersion", rootProject.mod_version
    inputs.property "modName", rootProject.mod_name
    inputs.property "modDescription", rootProject.mod_description
    inputs.property "modHomepage", rootProject.mod_homepage
    inputs.property "modSource", rootProject.mod_source
    inputs.property "modAuthors", rootProject.mod_authors
    inputs.property "modLicense", rootProject.mod_license

    filesMatching("META-INF/mods.toml") {
        expand "minecraftVersion": project.minecraft_version,
                "architecturyVersion": project.architectury_version,
                "modVersion": project.mod_version,
                "modName": rootProject.mod_name,
                "modDescription": rootProject.mod_description,
                "modHomepage": rootProject.mod_homepage,
                "modSource": rootProject.mod_source,
                "modAuthors": rootProject.mod_authors,
                "modLicense": rootProject.mod_license
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    archivesBaseName = "${rootProject.archivesBaseName}-forge"

    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }
}
