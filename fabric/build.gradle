plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        datagen {
            inherit client
            name "Data Generation"
            runDir "run"

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    if (rootProject.hasProperty("forge_config_api_port_version")) {
        modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"
    }

    if (rootProject.hasProperty("dim_lib_version")) {
        modCompileOnlyApi("com.github.iPortalTeam:DimLib:v${rootProject.dim_lib_version}-mc${rootProject.minecraft_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    if (rootProject.hasProperty("imm_ptl_version")) {
        modCompileOnlyApi("com.github.iPortalTeam:ImmersivePortalsMod:v${rootProject.imm_ptl_version}-mc${rootProject.minecraft_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    if (rootProject.hasProperty("cloth_config_version")) {
        modCompileOnlyApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    if (rootProject.hasProperty("mod_menu_version")) {
        modCompileOnlyApi("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    if (rootProject.hasProperty("teamreborn_energy_api_version")) {
        modCompileOnlyApi("teamreborn:energy:${rootProject.teamreborn_energy_api_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    if (rootProject.hasProperty("ae2_api_version")) {
        modCompileOnlyApi("appeng:appliedenergistics2-forge:${rootProject.ae2_api_version}:api") {
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "minecraftVersion", rootProject.minecraft_version
    inputs.property "architecturyVersion", rootProject.architectury_version
    inputs.property "forgeConfigApiPortVersion", rootProject.forge_config_api_port_version
    inputs.property "modId", rootProject.mod_id
    inputs.property "modVersion", rootProject.mod_version
    inputs.property "modName", rootProject.mod_name
    inputs.property "modDescription", rootProject.mod_description
    inputs.property "modHomepage", rootProject.mod_homepage
    inputs.property "modSource", rootProject.mod_source
    inputs.property "modAuthors", rootProject.mod_authors
    inputs.property "modLicense", rootProject.mod_license

    filesMatching("fabric.mod.json") {
        expand "minecraftVersion": project.minecraft_version,
                "architecturyVersion": project.architectury_version,
                "forgeConfigApiPortVersion": project.forge_config_api_port_version,
                "modId": project.mod_id,
                "modVersion": project.mod_version,
                "modName": rootProject.mod_name,
                "modDescription": rootProject.mod_description,
                "modHomepage": rootProject.mod_homepage,
                "modSource": rootProject.mod_source,
                "modAuthors": rootProject.mod_authors,
                "modLicense": rootProject.mod_license
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    archivesBaseName = "${rootProject.archivesBaseName}-fabric"

    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }
}
